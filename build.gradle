import org.apache.tools.ant.filters.ReplaceTokens

import static org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL

plugins {
	id("groovy")
	id("com.jfrog.bintray") version "1.8.4"
}

String userHome = System.getProperty("user.home")
ext.installBinDir = "${userHome}/.sdkman/bin"
ext.installSrcDir = "${userHome}/.sdkman/src"

def loadConfiguration() {
	def environment = hasProperty("env") ? env : "local"
	ext.environment = environment
	println("Environment is set to: ${environment}")

	def configFile = file("config.groovy")
	def config = new ConfigSlurper(environment).parse(configFile.toURI().toURL())
	ext.config = config
}

loadConfiguration()

ext.buildNumber           = System.getenv("TRAVIS_BUILD_NUMBER") ?: "0"
ext.sdkmanCliBuildVersion = "${config.sdkmanCliVersion}+${buildNumber}".toString()

repositories.jcenter()

dependencies {
	testImplementation(group: "com.github.tomakehurst", name: "wiremock",         version: "2.25.1") {
		exclude(module: "junit")
	}
	testImplementation(group: "io.cucumber",            name: "cucumber-groovy",  version: "4.7.1")
	testImplementation(group: "io.cucumber",            name: "cucumber-junit",   version: "4.7.4")
	testImplementation(group: "io.cucumber",            name: "gherkin",          version: "5.2.0")
	testImplementation(group: "junit",                  name: "junit",            version: "4.13")
	testImplementation(group: "org.codehaus.groovy",    name: "groovy",           version: "2.4.19")
	testImplementation(group: "org.codehaus.groovy",    name: "groovy-json",      version: "2.4.19")
	testImplementation(group: "org.codehaus.groovy",    name: "groovy-templates", version: "2.4.19")
	testImplementation(group: "org.slf4j",              name: "slf4j-api",        version: "1.7.30")
	testImplementation(group: "org.slf4j",              name: "slf4j-simple",     version: "1.7.30")
	testImplementation(group: "org.spockframework",     name: "spock-core",       version: "1.3-groovy-2.4") {
		exclude(module: "groovy-all")
	}
}

task prepareScripts(type: Copy) {
	from("src/main/bash")
	into("build/scripts")
	include("**/*")
	filter(
		ReplaceTokens,
		tokens: [
			SDKMAN_VERSION:        sdkmanCliBuildVersion,
			SDKMAN_CANDIDATES_API: config.candidatesApi
		]
	)
}

tasks.test.configure {
	dependsOn(prepareScripts)
	testLogging.exceptionFormat = FULL
}

task assembleArchive(type: Zip, dependsOn: prepareScripts) {
	archiveAppendix = "cli"
	archiveVersion  = sdkmanCliBuildVersion
	from("build/scripts")
	include("*.sh*")
}

tasks.assemble.configure {
	dependsOn(assembleArchive)
}

task cleanInstallInit(type: Delete) {
	delete(installBinDir)
}

task cleanInstallModules(type: Delete) {
	delete(installSrcDir)
}

task installInit(type: Copy, dependsOn: [cleanInstallInit, prepareScripts]) {
	from("build/scripts")
	into(installBinDir)
	include("sdkman-init.sh")
}

task installModules(type: Copy, dependsOn: [cleanInstallModules, prepareScripts]) {
	from("build/scripts")
	into(installSrcDir)
	include("sdkman-*.sh")
	exclude("sdkman-init.sh")
}

task install(dependsOn: [installInit, installModules])

bintray {
	user    = System.getenv("BINTRAY_USERNAME")
	key     = System.getenv("BINTRAY_API_KEY")
	publish = true
	filesSpec {
		from("build/distributions")
		into(".")
	}
	pkg {
		repo     = "generic"
		name     = "sdkman-cli"
		userOrg  = "sdkman"
		licenses = ["Apache-2.0"]
		vcsUrl   = "https://github.com/sdkman/sdkman-cli.git"
		version {
			name     = sdkmanCliBuildVersion
			desc     = "Binary zip distribution of SDKMAN bash client."
			released = new Date()
		}
	}
}
