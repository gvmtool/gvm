import org.apache.tools.ant.filters.ReplaceTokens

import static org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL

plugins {
	id('groovy')
}

String userHome = System.getProperty('user.home')
ext.installBinDir = "${userHome}/.sdkman/bin"
ext.installSrcDir = "${userHome}/.sdkman/src"
ext.installContribDir = "${userHome}/.sdkman/contrib"

def loadConfiguration() {
	def environment = hasProperty('env') ? env : 'local'
	ext.environment = environment
	println("Environment is set to: ${environment}")

	def buildNumber = hasProperty('buildNumber') ? buildNumber : '0'
	ext.buildNumber = buildNumber
	println("Build number set to: ${buildNumber}")

	def configFile = file('config.groovy')
	def config = new ConfigSlurper(environment).parse(configFile.toURI().toURL())
	ext.config = config
}

loadConfiguration()

ext.sdkmanCliBuildVersion = "${config.sdkmanCliVersion}+${buildNumber}".toString()

repositories.jcenter()

dependencies {
	testImplementation('com.github.tomakehurst:wiremock:2.25.1') {
		exclude(module: 'junit')
	}
	testImplementation('io.cucumber:cucumber-groovy:4.7.1')
	testImplementation('io.cucumber:cucumber-junit:4.7.4')
	testImplementation('io.cucumber:gherkin:5.2.0')
	testImplementation('junit:junit:4.13')
	testImplementation('org.codehaus.groovy:groovy:2.4.19')
	testImplementation('org.codehaus.groovy:groovy-json:2.4.19')
	testImplementation('org.codehaus.groovy:groovy-templates:2.4.19')
	testImplementation('org.slf4j:slf4j-api:1.7.30')
	testImplementation('org.slf4j:slf4j-simple:1.7.30')
	testImplementation('org.spockframework:spock-core:1.3-groovy-2.4') {
		exclude(module: 'groovy-all')
	}
}

task prepareScripts(type: Copy) {
	from('src/main/bash')
	into('build/scripts')
	include('**/*')
	filter(
			ReplaceTokens,
			tokens: [
					SDKMAN_VERSION       : sdkmanCliBuildVersion,
					SDKMAN_CANDIDATES_API: config.candidatesApi
			]
	)
}

task prepareContrib(type: Copy) {
	from('contrib')
	into('build/contrib')
}

tasks.test.configure {
	dependsOn(prepareScripts)
	testLogging.exceptionFormat = FULL
}

task assembleArchive(type: Zip, dependsOn: [prepareScripts, prepareContrib]) {
	archiveAppendix = 'cli'
	archiveVersion = sdkmanCliBuildVersion
	from('build/scripts') {
		include('*.sh*')
	}
	from('build') {
		include('contrib/**')
	}
}

tasks.assemble.configure {
	dependsOn(assembleArchive)
}

task cleanInstallInit(type: Delete) {
	delete(installBinDir)
}

task cleanContribInit(type: Delete) {
	delete(installContribDir)
}

task cleanInstallModules(type: Delete) {
	delete(installSrcDir)
}

task installContrib(type: Copy, dependsOn: [cleanContribInit, prepareContrib]) {
	from('build/contrib')
	into(installContribDir)
}

task installInit(type: Copy, dependsOn: [cleanInstallInit, prepareScripts]) {
	from('build/scripts')
	into(installBinDir)
	include('sdkman-init.sh')
}

task installModules(type: Copy, dependsOn: [cleanInstallModules, prepareScripts]) {
	from('build/scripts')
	into(installSrcDir)
	include('sdkman-*.sh')
	exclude('sdkman-init.sh')
}

task install(dependsOn: [installInit, installContrib, installModules])
