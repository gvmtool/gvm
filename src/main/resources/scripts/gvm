#!/bin/bash
GVM_VERSION="@GVM_VERSION@"
PLATFORM=$(uname)

#
# function definitions
#

function __gvmtool_help {
	CANDIDATES=$(curl -s "$GVM_SERVICE/candidates")
	echo ""
	echo "Usage: gvm <command> <candidate> [version]"
	echo ""
	echo "   command    :  install, uninstall, list, use, current, version, selfupdate, broadcast or help"
	echo "   candidate  :  $CANDIDATES"
	echo "   version    :  optional, defaults to latest stable if not provided"
	echo ""
	echo "eg: gvm install groovy"
}

function __gvmtool_check_candidate_present {
	if [ -z "$1" ]; then
		echo -e "\nNo candidate provided."
		__gvmtool_help
		return 1
	fi
}

function __gvmtool_check_version_present {
	if [ -z "$1" ]; then
		echo -e "\nNo candidate version provided."
		__gvmtool_help
		return 1
	fi
}

function __gvmtool_determine_version {
	if [ -z "$1" ]; then
		VERSION=$(curl -s "$GVM_SERVICE/candidates/$CANDIDATE/default")
	else
		VERSION_VALID=$(curl -s "$GVM_SERVICE/candidates/$CANDIDATE/$1")
		if [ $VERSION_VALID == 'valid' ]; then
			VERSION="$1"
		else
			echo ""
			echo "Stop! $1 is not a valid $CANDIDATE version."
			return 1
		fi
	fi
}

function __gvmtool_build_version_csv {
	CANDIDATE="$1"
	CSV=""
	for version in $(ls -1 "$GVM_DIR/$CANDIDATE"); do
		if [ $version != 'current' ]; then
			CSV="$version,$CSV"
		fi
	done
	CSV=${CSV%?}
}

function __gvmtool_determine_current_version {
	CANDIDATE="$1"
	CURRENT=$(readlink "$GVM_DIR/$CANDIDATE/current" | sed -e "s_$GVM_DIR/$CANDIDATE/__g")
}

function __gvmtool_download {
	CANDIDATE="$1"
	VERSION="$2"
	mkdir -p "$GVM_DIR/archives"
	if [ ! -f "$GVM_DIR/archives/$CANDIDATE-$VERSION.zip" ]; then
		echo ""
		echo "Downloading: $CANDIDATE $VERSION" 
		echo ""
		DOWNLOAD_URL="$GVM_SERVICE/download/$CANDIDATE/$VERSION?platform=$PLATFORM"
		ZIP_ARCHIVE="$GVM_DIR/archives/$CANDIDATE-$VERSION.zip"
		curl -L "$DOWNLOAD_URL" > "$ZIP_ARCHIVE"
		__gvmtool_validate_zip "$ZIP_ARCHIVE" || return 1
	else
		echo ""
		echo "Found a previously downloaded $CANDIDATE $VERSION archive. Not downloading it again..."
		__gvmtool_validate_zip "$GVM_DIR/archives/$CANDIDATE-$VERSION.zip" || return 1
	fi
	echo ""
}

function __gvmtool_validate_zip {
	ZIP_ARCHIVE="$1"
	ZIP_OK=$(unzip -t "$ZIP_ARCHIVE" | grep 'No errors detected in compressed data')
	if [ -z "$ZIP_OK" ]; then
		rm "$ZIP_ARCHIVE"
		echo ""
		echo "Stop! The archive was corrupt and has been removed! Please try installing again."
		return 1
	fi
}

function __gvmtool_no_connection {
	echo "                                                         "
	echo "---------------------------------------------------------"
	echo "                                                         "
	echo "The GVM service is down or the internet is not reachable!"
	echo "     If the problem persists please notify: @gvmtool     "
	echo "                                                         "
	echo "---------------------------------------------------------"
}

function __gvmtool_default_environment_variables {
	if [ ! "$GVM_SERVICE" ]; then
		GVM_SERVICE="http://localhost:8080"
	fi

	if [ ! "$GVM_DIR" ]; then
		GVM_DIR="$HOME/.gvm"
	fi
}

function __gvmtool_server_broadcast {
	BROADCAST_LIVE=$(curl -s "$GVM_SERVICE/broadcast/$GVM_VERSION")
	if [ ! "$BROADCAST_LIVE" ]; then
		__gvmtool_no_connection
		return 1
	fi
}

function __gvmtool_check_upgrade_available {
	UPGRADE_AVAILABLE=""
	UPGRADE_NOTICE=$(echo "$BROADCAST_LIVE" | grep 'Your version of GVM is out of date!')
	if [[ "$UPGRADE_NOTICE" && "$COMMAND" != 'selfupdate' ]]; then
		UPGRADE_AVAILABLE="true"
	fi
}

function __gvmtool_display_broadcast {
	COMMAND="$1"
	BROADCAST_FILE="$GVM_DIR/var/broadcast"
	if [ -f "$BROADCAST_FILE" ]; then
		BROADCAST_HIST=$(cat "$BROADCAST_FILE")
	fi

	if [[ "$BROADCAST_LIVE" != "$BROADCAST_HIST" && "$COMMAND" != 'broadcast' ]]; then
		mkdir -p "$GVM_DIR/var"
		echo "$BROADCAST_LIVE" > "$BROADCAST_FILE"
		echo "$BROADCAST_LIVE"
	fi
}

function __gvmtool_link_candidate_version {
	CANDIDATE="$1"
	VERSION="$2"

	UPPER_CANDIDATE=`echo "$CANDIDATE" | tr '[:lower:]' '[:upper:]'`
	export "${UPPER_CANDIDATE}_HOME"="$GVM_DIR/$CANDIDATE/$VERSION"
	export PATH=`echo $PATH | sed -E "s!$GVM_DIR/$CANDIDATE/([0-9][^/]+|current)!$GVM_DIR/$CANDIDATE/$VERSION!g"`

	if [ -L "$GVM_DIR/$CANDIDATE/current" ]; then
		unlink "$GVM_DIR/$CANDIDATE/current"
	fi
	ln -s "$GVM_DIR/$CANDIDATE/$VERSION" "$GVM_DIR/$CANDIDATE/current"
	echo ""
	echo Using "$CANDIDATE" version "$VERSION"
}

function __gvmtool_install_candidate_version {
	CANDIDATE="$1"
	VERSION="$2"
	__gvmtool_download "$CANDIDATE" "$VERSION" || return 1
	echo "Installing: $CANDIDATE $VERSION"

	mkdir -p "$GVM_DIR/$CANDIDATE"

	unzip -oq "$GVM_DIR/archives/$CANDIDATE-$VERSION.zip" -d "/tmp/"
	mv "/tmp/$CANDIDATE-$VERSION" "$GVM_DIR/$CANDIDATE/$VERSION"
	echo "Done installing!"
	echo ""
}
#
# Command functions
#

function __gvmtool_install {
	CANDIDATE="$1"
	__gvmtool_check_candidate_present "$CANDIDATE" || return 1
	__gvmtool_determine_version "$2" || return 1

	if [ -d "$GVM_DIR/$CANDIDATE/$VERSION" ]; then
		echo ""
		echo "Stop! $CANDIDATE $VERSION is already installed."
		return 1
	fi

	__gvmtool_install_candidate_version "$CANDIDATE" "$VERSION" || return 1

	echo -n "Do you want to use $CANDIDATE $VERSION now? (Y/n): "
	read USE
	if [[ -z "$USE" || "$USE" == "y" || "$USE" == "Y" ]]; then
		__gvmtool_link_candidate_version "$CANDIDATE" "$VERSION"
	fi
}

function __gvmtool_use {
	CANDIDATE="$1"
	__gvmtool_check_candidate_present "$CANDIDATE" || return 1
	__gvmtool_determine_version "$2" || return 1

	if [ ! -d "$GVM_DIR/$CANDIDATE/$VERSION" ]; then
		echo ""
		echo "Stop! $CANDIDATE $VERSION is not installed."
		echo -n "Do you want to install it now? (Y/n): "
		read INSTALL 
		if [[ -z "$INSTALL" || "$INSTALL" == "y" || "$INSTALL" == "Y" ]]; then
			install_candidate_version "$CANDIDATE" "$VERSION"
		else
			return 1
		fi
	fi

	__gvmtool_link_candidate_version "$CANDIDATE" "$VERSION"
}

function __gvmtool_current {
	CANDIDATE="$1"
	__gvmtool_check_candidate_present "$CANDIDATE" || return 1
	__gvmtool_determine_current_version "$CANDIDATE" || return 1
	if [ -n "$CURRENT" ]; then
		echo Using "$CANDIDATE" version "$CURRENT"
	else
		echo Not using any version of "$CANDIDATE"
	fi
}

function __gvmtool_list {
	CANDIDATE="$1"
	__gvmtool_check_candidate_present "$CANDIDATE" || return 1
	__gvmtool_build_version_csv "$CANDIDATE" || return 1
	__gvmtool_determine_current_version "$CANDIDATE" || return 1
	FRAGMENT=$(curl -s "$GVM_SERVICE/candidates/$CANDIDATE/list?platform=$PLATFORM&current=$CURRENT&installed=$CSV")
	echo "$FRAGMENT"
}

function __gvmtool_uninstall {
	CANDIDATE="$1"
	VERSION="$2"
	__gvmtool_check_candidate_present "$CANDIDATE" || return 1
	__gvmtool_check_version_present "$VERSION" || return 1
	CURRENT=$(readlink "$GVM_DIR/$CANDIDATE/current" | sed -e "s_$GVM_DIR/$CANDIDATE/__g")
	if [ -h "$GVM_DIR/$CANDIDATE/current" -a "$VERSION" == "$CURRENT" ]; then
		echo ""
		echo "Unselecting $CANDIDATE $VERSION..."
		unlink "$GVM_DIR/$CANDIDATE/current"
	fi
	echo ""
	if [ -d "$GVM_DIR/$CANDIDATE/$VERSION" ]; then
		echo "Uninstalling $CANDIDATE $VERSION..."
		rm -rf "$GVM_DIR/$CANDIDATE/$VERSION"
	else
		echo "$CANDIDATE $VERSION is not installed."
	fi
}

function __gvmtool_version {
	echo "Groovy enVironment Manager $GVM_VERSION"
}

function __gvmtool_broadcast {
	if [ "$BROADCAST_HIST" ]; then
		echo "$BROADCAST_HIST"
	else
		echo "$BROADCAST_LIVE"
	fi
}

function __gvmtool_selfupdate {
	curl -s "$GVM_SERVICE/selfupdate" | bash
}

# INSERT NEW COMMANDS BEFORE HERE

# Main command
function gvm {
	#
	# Various sanity checks and default settings
	#
	__gvmtool_default_environment_variables
	mkdir -p "$GVM_DIR"

	__gvmtool_server_broadcast || return 1
	__gvmtool_check_upgrade_available
	if [[ "$UPGRADE_AVAILABLE" && "$1" != "broadcast" ]]; then
		echo "$BROADCAST_LIVE"
		echo ""
	else
		__gvmtool_display_broadcast "$1"
	fi

	# Check whether the command exists as an internal function...
	CMD_TYPE=`type -t __gvmtool_"$1"`

	# ...or as a script on the path.
	SCRIPT_PATH="$GVM_DIR/plugins/gvm-$1.sh"

	if [[ -z $CMD_TYPE && ! -f $SCRIPT_PATH ]]; then
		echo -e "\nInvalid command: $1"
		__gvmtool_help
		return 1
	fi

	# Check whether the candidate exists
	CANDIDATE_VALID=$(curl -s "$GVM_SERVICE/candidates/$2")
	if [ "$CANDIDATE_VALID" == 'invalid' ]; then
		echo -e "\nStop! $2 is not a valid candidate."
		return 1
	fi

	# Execute the requested command
	if [ $CMD_TYPE ]; then
		# It's available as a shell function
		__gvmtool_"$1" "$2" "$3"
	else
		# It's a shell script in the plugins directory
		$SCRIPT_PATH "$1" "$2" "$3"
	fi
}

